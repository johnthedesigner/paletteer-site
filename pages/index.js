import chroma from "chroma-js";
import _ from "lodash";
import Head from "next/head";
import { useEffect, useState } from "react";

import ColorPicker from "@/components/ColorPicker";
import Logo from "@/components/logo";
import PlusIcon from "@/components/PlusIcon";
import generateColors from "@/utils/generateColors";

export default function Home() {
  const defaultSeed = { hex: "#FFFFFF", name: null };

  const [palettes, setPalettes] = useState([]);
  const [seeds, setSeeds] = useState([defaultSeed]);
  const [selectedSeed, setSelectedSeed] = useState(0);
  const [selectedSwatch, setSelectedSwatch] = useState(0);
  const [hoveredSwatch, setHoveredSwatch] = useState(null);
  const [seedLabelEditor, setSeedLabelEditor] = useState(null);

  // When the seed colors are updated, update full palettes
  useEffect(() => {
    setPalettes(
      _.map(seeds, (seed) => {
        if (chroma.valid(seed.hex)) {
          return generateColors(seed.hex);
        } else {
          return generateColors("white");
        }
      })
    );
  }, [seeds]);

  const addColor = async () => {
    await setSeeds([...seeds, defaultSeed]);
    selectSeed(seeds.length);
  };

  const selectSeed = (index) => {
    setSelectedSeed(index);
  };

  const selectSwatch = (index) => {
    setSelectedSwatch(index);
  };

  const hoverSwatch = (index) => {
    setHoveredSwatch(index);
  };

  const editingSeedLabel = (index) => {
    setSeedLabelEditor(index);
  };

  const updateSeedColor = (color) => {
    let newSeeds = [...seeds];
    newSeeds[selectedSeed].hex = color.hex;
    setSeeds(newSeeds);
  };

  const updateSeedName = (e) => {
    let newSeeds = [...seeds];
    newSeeds[selectedSeed].name = e.target.value;
    setSeeds(newSeeds);
  };

  const getSelectedSeedName = () => {
    if (seeds[selectedSeed]) {
      if (seeds[selectedSeed].name != null) {
        return seeds[selectedSeed].name;
      } else {
        return palettes[selectedSeed] ? palettes[selectedSeed].name : "";
      }
    }
  };

  const Seed = ({ index, seed }) => {
    return (
      <div className={`seed ${selectedSeed === index ? "seed--selected" : ""}`}>
        <button
          className="seed__drop"
          style={{
            background: seed.hex,
            boxShadow:
              selectedSeed === index
                ? "inset 0.25rem 0.25rem 0 rgb(0,0,0,.25)"
                : "none",
          }}
          onClick={(e) => selectSeed(index)}
        />
        {selectedSeed === index && (
          <>
            <div
              className="seed__label"
              onDoubleClick={() => editingSeedLabel(index)}
              style={{
                color: palettes[selectedSeed]
                  ? palettes[selectedSeed].swatches[6].hex
                  : "black",
              }}>
              {getSelectedSeedName()}
            </div>
          </>
        )}
      </div>
    );
  };

  return (
    <>
      <Head>
        <title>Paletteer â€“ Flexible color palettes for digital projects</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="header">
          <div
            className="logo"
            style={{
              color: palettes[selectedSeed]
                ? palettes[selectedSeed].swatches[2].hex
                : "#F77777",
            }}>
            <Logo />
          </div>
        </div>
        <div className="controls">
          <div className="seed-colors">
            <p className="seed-colors__label">Seed Colors: </p>
            {seeds.length > 0 ? (
              <>
                {_.map(seeds, (seed, index) => {
                  return (
                    <>
                      <Seed index={index} seed={seed} />
                    </>
                  );
                })}
              </>
            ) : (
              <p className="seed-colors__blank-state">None yet!</p>
            )}
            <button className="seed__add-button" onClick={addColor}>
              <PlusIcon />
            </button>
            {/* <button>Export Colors</button> */}
          </div>
        </div>
        <div className="swatches">
          {palettes.length === 0 && (
            <>
              <h1>Swatches blank state</h1>
            </>
          )}
          {palettes.length > 0 && (
            <>
              <div className="side-controls">
                <p className="side-controls__label">Name</p>
                <input
                  className="side-controls__input"
                  value={getSelectedSeedName()}
                  onChange={updateSeedName}
                />
                <p className="side-controls__label">Name</p>
                {selectedSeed != null && (
                  <ColorPicker
                    color={
                      seeds[selectedSeed] ? seeds[selectedSeed].hex : "#FFFFFF"
                    }
                    hex={
                      seeds[selectedSeed] ? seeds[selectedSeed].hex : "#FFFFFF"
                    }
                    hsl={chroma(
                      seeds[selectedSeed] ? seeds[selectedSeed].hex : "#FFFFFF"
                    ).hsl()}
                    hsv={chroma(
                      seeds[selectedSeed] ? seeds[selectedSeed].hex : "#FFFFFF"
                    ).hsv()}
                    onChange={updateSeedColor}
                  />
                )}
              </div>
              {_.map(
                (palettes[selectedSeed] ? palettes[selectedSeed] : []).swatches,
                (swatch, index) => {
                  // Check if this is the selected swatch
                  let selected = index === selectedSwatch;
                  // Check if we should display contrast figures
                  let displayContrast =
                    index === selectedSwatch || index === hoveredSwatch;
                  let swatchStyles = {
                    background: swatch.hex,
                    boxShadow: selected
                      ? "inset 0.25rem 0.25rem 0 rgb(0,0,0,.25)"
                      : "none",
                    transition: `all ease-in-out 0.1s, background ease-in 0.1s ${
                      index * 0.02
                    }s`,
                    padding: selected
                      ? "2.125rem 0.375rem 1.875rem 0.875rem"
                      : "2rem 0.5rem",
                  };
                  let adaptiveTextStyles = { color: swatch.displayColor };
                  let contrastStyles = { opacity: displayContrast ? 1 : 0 };
                  return (
                    <div
                      className="swatch"
                      onClick={() => selectSwatch(index)}
                      onMouseEnter={() => hoverSwatch(index)}
                      onMouseLeave={() => hoverSwatch(null)}>
                      <div className="swatch__body" style={swatchStyles}>
                        <div
                          className="swatch__white-contrast"
                          style={contrastStyles}>
                          <p className="swatch__contrast-text">
                            White Contrast
                          </p>
                          <p
                            className="swatch__contrast-value"
                            style={{ background: "white", color: swatch.hex }}>
                            {swatch.contrastWhite}
                          </p>
                        </div>
                        <div
                          className="swatch__label"
                          style={adaptiveTextStyles}>
                          <p className="swatch__index">
                            {_.padStart(index + 1, 2, "0")}
                          </p>
                          <p className="swatch__hex">{swatch.hex}</p>
                        </div>
                        <div
                          className="swatch__black-contrast"
                          style={contrastStyles}>
                          <p className="swatch__contrast-text">
                            Black Contrast
                          </p>
                          <p
                            className="swatch__contrast-value"
                            style={{ background: "black", color: swatch.hex }}>
                            {swatch.contrastBlack}
                          </p>
                        </div>
                      </div>
                    </div>
                  );
                }
              )}
            </>
          )}
        </div>
      </main>
    </>
  );
}
